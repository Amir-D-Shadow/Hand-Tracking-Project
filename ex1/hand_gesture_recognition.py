# -*- coding: utf-8 -*-
"""hand_gesture_recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sUD-IHrkGoPJwI5ZJBCQZ0kOojs0e_Bf
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.models import Sequential
from keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout , BatchNormalization
from keras.preprocessing.image import ImageDataGenerator
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report,confusion_matrix
from keras.callbacks import ReduceLROnPlateau

from google.colab import drive
drive.mount('/content/drive')

#load data
data_test=pd.read_csv("https://raw.githubusercontent.com/VinitaSilaparasetty/hand-gesture-recognition/main/sign_mnist_test.csv")
data_train=pd.read_csv("/content/drive/MyDrive/sign_mnist_train.csv")

def show_img(img,df):
  label = data_test['label'][img]
  pixels =data_test.iloc[img,1:]
  pixels = np.array(pixels,dtype="uint8")
  pixels = pixels.reshape((28,28))

  plt.title('Label is {label}'.format(label=label))
  plt.imshow(pixels,cmap='gray')
  plt.show()

data_test.head()
show_img(20,data_test)

#extract label
y_train = data_train['label']
y_test = data_test["label"]
del data_train["label"]
del data_test["label"]

#label Binarizer
label_binarizer = LabelBinarizer()

y_train = label_binarizer.fit_transform(y_train)
y_test = label_binarizer.fit_transform(y_test)

x_train = data_train.values
x_test = data_test.values

#Normalization
x_train=x_train/255
x_test=x_test/255

x_train=x_train.reshape(-1,28,28,1)
x_test = x_test.reshape(-1,28,28,1)

data_generator = ImageDataGenerator(
    featurewise_center=False,
    samplewise_center=False,
    featurewise_std_normalization=False,
    samplewise_std_normalization=False,
    zca_whitening=False,
    rotation_range=10,
    zoom_range=0.1,
    width_shift_range=0.1,
    height_shift_range=0.1,
    horizontal_flip=False,
    vertical_flip=False)

model = Sequential()
model.add(Conv2D(75,(3,3),strides=1,padding="same",activation="relu",input_shape=(28,28,1)))
model.add(BatchNormalization())
model.add(MaxPool2D((2,2),strides=2,padding="same"))
model.add(Conv2D(50,(3,3),strides=1,padding="same",activation="relu"))
model.add(Dropout(0.2))
model.add(BatchNormalization())
model.add(MaxPool2D((2,2),strides=2,padding="same"))
model.add(Conv2D(25,(3,3),strides=1,padding="same",activation="relu"))
model.add(BatchNormalization())
model.add(MaxPool2D((2,2),strides=2,padding="same"))
model.add(Flatten())
model.add(Dense(units=512,activation="relu"))
model.add(Dropout(0.3))
model.add(Dense(units=24,activation="softmax"))

model.compile(optimizer="adam",loss = "categorical_crossentropy",metrics=['accuracy'])

learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy',patience=2,verbose=1,factor=0.5,min_lr=0.00001)

model.fit(data_generator.flow(x_train,y_train,batch_size=128),epochs=20,validation_data=(x_test,y_test),callbacks=[learning_rate_reduction])

model.evaluate(x_test,y_test)

predictions = model.predict_classes(x_test)
for i in range(len(predictions)):
  if(predictions[i]>=9 or predictions[i]>=25):
    predictions[i] += 1

predictions[:5]

#save model 
#model.save("hand-gesture.h5")